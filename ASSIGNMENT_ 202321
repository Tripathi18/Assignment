{"cells":[{"cell_type":"markdown","source":["###**ASSIGNMENT: 202321**\n","Note: change the path of the csv file before running it.\n","The file is also uploaded in github as well."],"metadata":{"id":"e1Xl6VWQ77hJ"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JAhkHjLvKwZ1","executionInfo":{"status":"ok","timestamp":1681892122781,"user_tz":-330,"elapsed":10590,"user":{"displayName":"","userId":""}},"outputId":"ba791d5d-5af6-47c3-d749-908965706d6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["##**Ensemble Classifier**\n","#**1(a)**"],"metadata":{"id":"eG_sarp_qYqc"}},{"cell_type":"code","source":["#self\n","import numpy as np\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.utils import resample\n","\n","class BaggingSoftmaxRegression:\n","    def __init__(self, n_models=10, sample_size=1.0):\n","        self.n_models = n_models\n","        self.sample_size = sample_size\n","        self.models = []\n","        for i in range(n_models):\n","            self.models.append(LogisticRegression(multi_class='multinomial', solver='lbfgs'))\n","            \n","    def fit(self, X, y):\n","        for model in self.models:\n","            X_sample, y_sample = resample(X, y, n_samples=int(self.sample_size*len(X)), replace=True)\n","            model.fit(X_sample, y_sample)\n","            \n","    def predict(self, X):\n","        predictions = np.zeros((X.shape[0], self.n_models))\n","        for i, model in enumerate(self.models):\n","            predictions[:,i] = model.predict_proba(X)[:,1]\n","        return np.argmax(predictions, axis=1)"],"metadata":{"id":"Pj5pg_OcvV9M"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**On given dataset impementation**"],"metadata":{"id":"F49x7hh_vxm7"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","df = pd.read_csv(\"/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv\")"],"metadata":{"id":"FSATpDnGvhi8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df.drop(\"material\", axis=1)  # Replace \"target_variable_name\" with the name of your target variable\n","y = df[\"material\"] #if you change you will get different accuracy\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"fq2tEW-jvtRX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bagging = BaggingSoftmaxRegression(n_models=10, sample_size=0.8)\n","bagging.fit(X_train, y_train)\n","y_pred = bagging.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Accuracy: {accuracy}\")"],"metadata":{"id":"CQc5tXV6wggi","executionInfo":{"status":"ok","timestamp":1681914715262,"user_tz":-330,"elapsed":444,"user":{"displayName":"","userId":""}},"outputId":"c2e616f5-ac48-4211-c447-dc8d27270de0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.0\n"]}]},{"cell_type":"markdown","source":["#**1(b)**"],"metadata":{"id":"oXppAqaewnzB"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load your dataset\n","df = pd.read_csv(\"/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv\")\n","\n","# Split the data into training and testing sets\n","X = df.drop(\"material\", axis=1)  # Replace \"target_variable_name\" with the name of your target variable\n","y = df[\"material\"]\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"WS_xM5jxwxhs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a decision tree classifier\n","tree = DecisionTreeClassifier(max_depth=1)\n","\n","# Fit the decision tree classifier on the training data\n","tree.fit(X_train, y_train)\n","\n","# Create an AdaBoost classifier with 10, 25, and 50 iterations\n","boost_10 = AdaBoostClassifier(base_estimator=tree, n_estimators=10)\n","boost_25 = AdaBoostClassifier(base_estimator=tree, n_estimators=25)\n","boost_50 = AdaBoostClassifier(base_estimator=tree, n_estimators=50)\n","\n","# Train the classifiers on the training data\n","boost_10.fit(X_train, y_train)\n","boost_25.fit(X_train, y_train)\n","boost_50.fit(X_train, y_train)"],"metadata":{"id":"Bf73CBpZzNFA","executionInfo":{"status":"ok","timestamp":1681914723615,"user_tz":-330,"elapsed":483,"user":{"displayName":"","userId":""}},"outputId":"09397211-be56-4d35-f2f6-6fcf32667d2b","colab":{"base_uri":"https://localhost:8080/","height":242}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=1))"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=1))</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=1))</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=1)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=1)</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":250}]},{"cell_type":"code","source":["# Make predictions on the testing data\n","y_pred_single = tree.predict(X_test)\n","y_pred_boost_10 = boost_10.predict(X_test)\n","y_pred_boost_25 = boost_25.predict(X_test)\n","y_pred_boost_50 = boost_50.predict(X_test)\n","\n","# Calculate the accuracy of each classifier\n","acc_single = accuracy_score(y_test, y_pred_single)\n","acc_boost_10 = accuracy_score(y_test, y_pred_boost_10)\n","acc_boost_25 = accuracy_score(y_test, y_pred_boost_25)\n","acc_boost_50 = accuracy_score(y_test, y_pred_boost_50)\n","\n","# Print the results\n","print(f\"Single decision tree accuracy: {acc_single}\")\n","print(f\"Boosting with 10 iterations accuracy: {acc_boost_10}\")\n","print(f\"Boosting with 25 iterations accuracy: {acc_boost_25}\")\n","print(f\"Boosting with 50 iterations accuracy: {acc_boost_50}\")"],"metadata":{"id":"RRB3vnBszaV0","executionInfo":{"status":"ok","timestamp":1681914729178,"user_tz":-330,"elapsed":1332,"user":{"displayName":"","userId":""}},"outputId":"da766bc4-2596-4c31-f2b2-c5cb7d6c3003","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Single decision tree accuracy: 0.375\n","Boosting with 10 iterations accuracy: 0.875\n","Boosting with 25 iterations accuracy: 0.6666666666666666\n","Boosting with 50 iterations accuracy: 0.75\n"]}]},{"cell_type":"markdown","source":["#**2(a)**"],"metadata":{"id":"7zAi8wIY1KqI"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the data from a CSV file\n","df = pd.read_csv(\"/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv\")\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(df.drop(\"material\", axis=1), df[\"material\"], test_size=0.2, random_state=42)\n"],"metadata":{"id":"E5eNIc611OwL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a logistic regression estimator\n","lr = LogisticRegression()\n","\n","# Create an AdaBoost classifier with 50 estimators\n","ada = AdaBoostClassifier(base_estimator=lr, n_estimators=5)\n","\n","# Fit the AdaBoost classifier to the training data\n","ada.fit(X_train, y_train)\n","\n","# Make predictions on the testing data using the AdaBoost classifier\n","y_pred = ada.predict(X_test)\n","\n","# Calculate the accuracy of the AdaBoost classifier\n","acc = accuracy_score(y_test, y_pred)\n","\n","# Print the accuracy of the AdaBoost classifier\n","print(\"Accuracy for AdaBoost with 5 estimators:\", acc)"],"metadata":{"id":"frSlXAVw162E","executionInfo":{"status":"ok","timestamp":1681914826654,"user_tz":-330,"elapsed":702,"user":{"displayName":"","userId":""}},"outputId":"315c9741-8777-4765-ca8d-67e0340da976","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy for AdaBoost with 5 estimators: 0.3333333333333333\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["#**2(b)**"],"metadata":{"id":"_iBmm1SQ6czI"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import accuracy_score\n","\n","# Load the data from a CSV file\n","df = pd.read_csv(\"/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv\")\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(df.drop(\"material\", axis=1), df[\"material\"], test_size=0.2, random_state=42)"],"metadata":{"id":"oJ7Uko1A6gJU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a logistic regression estimator\n","lr = LogisticRegression()\n","\n","# Define the number of estimators to use\n","n_estimators = [10, 25, 50]"],"metadata":{"id":"HAdm-Ks66piM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Evaluate the AdaBoost classifier with different numbers of estimators\n","for n in n_estimators:\n","    # Create an AdaBoost classifier with n estimators\n","    ada = AdaBoostClassifier(base_estimator=lr, n_estimators=n)\n","    \n","    # Fit the AdaBoost classifier to the training data\n","    ada.fit(X_train, y_train)\n","    \n","    # Make predictions on the testing data using the AdaBoost classifier\n","    y_pred = ada.predict(X_test)\n","    \n","    # Calculate the accuracy of the AdaBoost classifier\n","    acc = accuracy_score(y_test, y_pred)\n","    \n","    # Print the accuracy of the AdaBoost classifier\n","    print(\"Accuracy for AdaBoost with\", n, \"estimators:\", acc)"],"metadata":{"id":"l4NfYX0_63_G","executionInfo":{"status":"ok","timestamp":1681914801994,"user_tz":-330,"elapsed":938,"user":{"displayName":"","userId":""}},"outputId":"0eb382c9-3094-4ecf-d2f6-2f912195091f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/ensemble/_base.py:166: FutureWarning: `base_estimator` was renamed to `estimator` in version 1.2 and will be removed in 1.4.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy for AdaBoost with 10 estimators: 0.3333333333333333\n","Accuracy for AdaBoost with 25 estimators: 0.3333333333333333\n","Accuracy for AdaBoost with 50 estimators: 0.3333333333333333\n"]}]},{"cell_type":"markdown","source":["##**K Means Algorithm Problem**"],"metadata":{"id":"iEL4tTrdeCSf"}},{"cell_type":"markdown","source":["#**1(a)**"],"metadata":{"id":"H3AQSbs5kszf"}},{"cell_type":"code","source":["import numpy as np\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","\n","# Load the text data\n","with open(\"/content/prgram_data.txt\", \"r\") as f:\n","    text_data = f.readlines()\n","\n","# Convert the text data to a numerical representation using the TF-IDF vectorizer\n","vectorizer = TfidfVectorizer(stop_words='english')\n","X = vectorizer.fit_transform(text_data)\n","\n","# Apply K-means clustering with K=3, 6, and 9\n","k_values = [3, 6, 9]\n","for k in k_values:\n","    kmeans = KMeans(n_clusters=k, random_state=0).fit(X)\n","    labels = kmeans.labels_\n","    score = silhouette_score(X, labels)\n","    print(f\"K={k}, Silhouette Score={score}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkv5XJEgp_kd","executionInfo":{"status":"ok","timestamp":1681911738492,"user_tz":-330,"elapsed":1327,"user":{"displayName":"","userId":""}},"outputId":"a6c48b8b-1f62-4f2c-d84e-62be95d1ac93"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["K=3, Silhouette Score=0.02361831758325266\n","K=6, Silhouette Score=0.015624737048339863\n","K=9, Silhouette Score=0.006140994531125715\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["#**1(B)**"],"metadata":{"id":"XK7vv0HEk60e"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.cluster import KMeans\n","\n","# Load the dataset from CSV file\n","df = pd.read_csv('/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv') #Remark: load your dataset here\n","df=df.drop(\"material\",axis=1)"],"metadata":{"id":"InqoAFbElCVs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import accuracy_score\n","\n","df = pd.read_csv('/content/drive/MyDrive/Sanskrit as NLP/program_data(unlabelled).csv')\n","# Extract the labels from the dataset\n","original_labels = df['material']\n","\n","# Apply K-Means clustering for K=3, 6, and 9\n","for k in [3, 6, 9]:\n","    # Initialize the KMeans object\n","    kmeans = KMeans(n_clusters=k)\n","    \n","    # Fit the data to the KMeans object\n","    kmeans.fit(df.drop('material', axis=1)) # assuming 'label' is the name of the label column\n","    \n","    # Get the cluster labels\n","    cluster_labels = kmeans.labels_\n","    \n","    # Compute the accuracy for each cluster\n","    accuracies = []\n","    for i in range(k):\n","        indices = (cluster_labels == i)\n","        if indices.any():\n","            cluster_label_counts = original_labels[indices].value_counts()\n","            most_frequent_label = cluster_label_counts.index[0]\n","            predicted_labels = pd.Series([most_frequent_label] * indices.sum())\n","            accuracy = accuracy_score(original_labels[indices], predicted_labels)\n","            accuracies.append(accuracy)\n","        else:\n","            accuracies.append(0)\n","    \n","    # Compute the overall accuracy\n","    weights = [(cluster_labels == i).mean() for i in range(k)]\n","    overall_accuracy = sum([w * a for w, a in zip(weights, accuracies)])\n","    \n","    # Print the results\n","    print(f'K = {k}')\n","    print(f'Cluster accuracies: {accuracies}')\n","    print(f'Overall accuracy: {overall_accuracy}\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o8OysbCuoQeD","executionInfo":{"status":"ok","timestamp":1681910561920,"user_tz":-330,"elapsed":429,"user":{"displayName":"","userId":""}},"outputId":"4dc19c4f-3c84-4877-e12f-0b67974c7b45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["K = 3\n","Cluster accuracies: [0.5384615384615384, 0.40625, 0.5306122448979592]\n","Overall accuracy: 0.5\n","\n","K = 6\n","Cluster accuracies: [0.5172413793103449, 0.34782608695652173, 0.6428571428571429, 0.5294117647058824, 0.4166666666666667, 0.45454545454545453]\n","Overall accuracy: 0.5\n","\n","K = 9\n","Cluster accuracies: [0.5263157894736842, 0.46153846153846156, 0.4166666666666667, 0.631578947368421, 0.42857142857142855, 0.4444444444444444, 0.42105263157894735, 0.5, 0.6153846153846154]\n","Overall accuracy: 0.49999999999999994\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1681915014010}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}